// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.Data;

namespace api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("api.Data.Classification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Classifications");
                });

            modelBuilder.Entity("api.Data.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Update")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Directories");
                });

            modelBuilder.Entity("api.Data.DirectorsMovie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("FKdirectorId")
                        .HasColumnType("integer");

                    b.Property<int?>("FKmovieId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Update")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("FKdirectorId");

                    b.HasIndex("FKmovieId");

                    b.ToTable("DirectorsMovies");
                });

            modelBuilder.Entity("api.Data.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("FKclassificationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Update")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("FKclassificationId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("api.Data.DirectorsMovie", b =>
                {
                    b.HasOne("api.Data.Director", "FKdirector")
                        .WithMany()
                        .HasForeignKey("FKdirectorId");

                    b.HasOne("api.Data.Movie", "FKmovie")
                        .WithMany()
                        .HasForeignKey("FKmovieId");

                    b.Navigation("FKdirector");

                    b.Navigation("FKmovie");
                });

            modelBuilder.Entity("api.Data.Movie", b =>
                {
                    b.HasOne("api.Data.Classification", "FKclassification")
                        .WithMany()
                        .HasForeignKey("FKclassificationId");

                    b.Navigation("FKclassification");
                });
#pragma warning restore 612, 618
        }
    }
}
